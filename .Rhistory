###MUTATING COLUMNS----
#The Basics----
#Load required package
library(tiydverse)
###MUTATING COLUMNS----
#The Basics----
#Load required package
library(tidyverse)
#Take a peek at inbuilt dataset.
glimpse(msleep)
msleep %>%
select(name, sleep_total) %>%
mutate(sleep_total_min = sleep_total * 60)
#Create new columns using aggregate functions.
msleep %>%
select(name, sleep_total) %>%
mutate(sleep_total_vs_AVG = sleep_total- round(mean(sleep_total), 1),
sleep_total_vs_MIN = sleep_total- min(sleep_total))
#Performing aggregate functions by row.
msleep %>%
select(name, contains("sleep")) %>%
rowwise() %>%
mutate(avg = mean(c(sleep_rem, sleep_cycle)))
#MUTATING ALL COLUMNS----
#Load required packages----
library(tidyverse)
msleep %>%
mutate_all(tolower)
#data cleaning using mutate_all() fucntion.
#Let's create messy dataset.
msleep_ohno <-msleep %>%
mutate_all(~paste(., " /n"))
msleep_ohno [, 1:3]
msleep_ohno [, 1:4]
msleep_corr <-msleep_ohno %>%
mutate_all(~str_replace_all(., "/n", "")) %>%
mutate_all(str_trim)
msleep_corr[, 1:4]
msleep %>%
mutate_all(round)
#Using mutate_if() function.
msleep %>%
select(name, sleep_total:bodywt) %>%
mutate_if(is.numeric, round)
#3.) Data Cleaning with mutate_at() function.
#mutate_at () function is useful to change specific columns
msleep %>%
select(name, sleep_total:awake) %>%
mutate_at(vars(contains("sleep")), ~(.*60))
### USING RENAME () FUNCTION AFTER A MUTATE() STATEMENT
#1.) To rename a column that has been mutated.
msleep %>%
select(name, sleep_total:awake) %>%
mutate_at(vars(contains("sleep")), ~(.*60)) %>%
mutate_at(vars(contains("sleep")), ~paste0(., "_min"))
### USING RENAME () FUNCTION AFTER A MUTATE() STATEMENT
#1.) To rename a column that has been mutated.
msleep %>%
select(name, sleep_total:awake) %>%
mutate_at(vars(contains("sleep")), ~(.*60)) %>%
rename_at(vars(contains("sleep")), ~paste0(., "_min"))
#Load required packages
library(tidyverse)
###RECODING DISCRETE COLUMNS----
msleep %>%
mutate(conservation2 = recode(conservation,
"en" = "Endangered",
"lc" = "Least_Concern",
"domesticated" = "Least_Concern",
.default = "other")) %>%
count(conservation)
###RECODING DISCRETE COLUMNS----
msleep %>%
mutate(conservation2 = recode(conservation,
"en" = "Endangered",
"lc" = "Least_Concern",
"domesticated" = "Least_Concern",
.default = "other")) %>%
count(conservation2)
#2.) Using mutate() with recode_factor().
msleep %>%
mutate(conservation2 = recode_factor(conservation,
"en" = "Endangered",
"lc" = "Least_Concern",
"domesticated" = "Least_Concern",
.default = "other",
.missing = "no data",
.ordered = TRUE)) %>%
count(conservation2)
msleep %>%
select(name, sleep_total) %>%
mutate(sleep_time = ifelse(sleep_total > 10, "long", "short"))
msleep %>%
select(name, sleep_total) %>%
mutate(sleep_total_discr = case_when(
sleep_total > 13 ~ "very long",
sleep_total > 10 ~ "long",
sleep_total > 7 ~ "limited",
TRUE ~ "short")) %>%
mutate(sleep_total_discr = factor(sleep_total_discr,
levels = c("short", "limited",
"long", "very long")))
#Using case_when() to group across columns
msleep %>%
mutate(silly_groups = case_when(
brainwt < 10 ~ "light_headed",
sleep_total > 10 ~ "lazy_sleeper",
is.na(sleep_rem) ~ "absent_rem",
TRUE ~ "other")) %>%
count(silly_groups)
#Load required packages
library(tidyverse)
msleep %>%
head()
msleep %>%
select(name, conservation)
msleep %>%
select(name, conservation) %>%
head()
msleep %>%
select(name, conservation) %>%
glimpse()
msleep %>%
select(name, conservation) %>%
mutate (conservation = toupper(conservation))
msleep %>%                                           # Take msleep dataset, and then...
select(name, conservation) %>%                     # Select target variables.
mutate (conservation = toupper(conservation)) %>%  # Change conservation variable to uppercase.
left_join(conservation_table, by = c("conservation" = "abbreviation")) %>%
mutate(description = ifelse(is.na(description), conservation, description))
msleep %>%                                           # Take msleep dataset, and then...
select(name, conservation) %>%                     # Select target variables.
mutate (conservation = toupper(conservation)) %>%  # Change conservation variable to uppercase.
left_join(conservation_table, by = c("conservation" = "abbreviation")) %>%
mutate(description = ifelse(is.na(description), conservation, description))
### SPREADING AND GATHERING DATA----
msleep %>%
head()
### SPREADING AND GATHERING DATA----
msleep %>%
select(name, contains("sleep")) %>%
gather(key = "sleep_measure", value = "time", -name)
#Restoring the original order with factor_key = TRUE argument.
(msleep_g <-msleep %>%
select(name, contains("sleep")) %>%
gather(key = "sleep_measure", value = "time", -name, factor_key = TRUE))
msleep_g %>%
spread(sleep_measure, time)
msleep %>%
select(name:order) %>%
na_if("omni")
